{"name":"Agi.js","tagline":"Adventure Game Interpreter for Sierra's classic 80's adventure games written in TypeScript","body":"# agi.js\r\nAdventure Game Interpreter for Sierra's classic 80's adventure games written in TypeScript.\r\n\r\n## Background\r\n\r\nThis is a project that aims to recreate one of the most beautiful game engines ever created.\r\nSierra On-Line's Adventure Game Interpreter was created in the mid 80's by Sierra employees \r\nJeff Stephenson and Chris Iden and quickly became the cornerstone on which many of Sierra's \r\nearly titles would be based. AGI was built around the concept of a virtual machine that made \r\nit fairly easy for Sierra to port their games to multiple platforms.\r\n\r\n![Space Quest II start screen](https://raw.githubusercontent.com/r1sc/agi.js/master/screenshots/sc1.png)\r\n\r\nThe virtual machine was based around an in-house developed C-like programming language called \"Logic\".\r\nWhen the programmer compiled a Logic file, the compiler produced an 8-bit \"opcode\" for each statement.\r\nIn the interpreter, each opcode was defined in a jump table which simply pointed to an assembler\r\nsubroutine. This made the system very fast and ridiculously elegant, because the logic itself never\r\nneeded to be recompiled no matter what the target platform was. It was also fairly easy to extend\r\nthe system which can be witnessed by the numerous versions of AGI interpreters produced by Sierra.\r\n\r\nBy the time these games were created, storage was limited and expensive. To reduce asset size,\r\nthe game's background images were defined as vector graphics instead of full raster images. \r\nWhen the game needed to display a new background image, it was drawn into a buffer and \r\nfinally blitted to the screen. This is interesting because this theoretically allows us to rescale \r\nthe images to any resolution. It's also interesting from an artistic perspective as it allows us to \r\ntrace how the artist originally drawed the pictures, command by command. \r\n\r\n![Space Quest II start screen](https://raw.githubusercontent.com/r1sc/agi.js/master/screenshots/sc2.gif)\r\n\r\nAnother interesting feature of the engine was its ability render a room with a pseudo-perspective.\r\nThe engine divided the screen into 15 sections, called priority bands. This was basically a\r\nkind of low-resolution Z-buffer. All background drawing commands were drawn both with a visual color\r\nand a priority value, so everytime the engine had to draw an animated object, each of its pixels were\r\ncompared against the backgrounds pixel's priority value to decide if the pixel was to be drawn or not.\r\nAll control-lines and boundaries where the player could not go was also drawn into this priority buffer.\r\n\r\n## Implementation\r\n\r\nMost of the code has been \"clean room\" implemented from the specs defined by Lance Ewing, Peter Kelly, \r\nClaudio Matsuoka, Stu George and David Symonds at http://wiki.scummvm.org/index.php/AGI/Specifications.\r\nSome parts of the PIC rendering code was borrowed from Lance Ewing's \"SHOWPIC\" program.\r\n\r\nThis TypeScript implementation parses the original asset files without any precompilation of any sort.\r\nThe system is divided into a renderer, a logic parser, an interpreter and a resource manager. \r\nThe resource manager is mostly complete, save for a few assets that hasn't been taken into consideration \r\nyet (sounds, dictionary etc.).\r\n\r\nThe interpreter works in cycles, best described in the documentation above. Every cycle the interpreter\r\nexecutes logic script 0 and any referenced logic scripts. The script itself may execture commands on the \r\ninterpreter that updates game objects and draws them to both a visual frame buffer and a priority buffer. \r\nThe visual buffer is at the end of the cycle blitted to a canvas.\r\n\r\nThe logic parser seems to be working well acording to my tests. The system mainly needs work on the \r\ninterpreter; the main issue being that some details are missing from the specs defined above and need\r\nslight reverse engineering.\r\n\r\n![Space Quest II text rendering](https://raw.githubusercontent.com/r1sc/agi.js/master/screenshots/sc3.png)\r\n\r\n## Contribution\r\n\r\n**Please fork and contribute!** If you make anything useful, please provide a pull request so I can integrate\r\nyour work into the main repo.\r\n\r\n## License\r\n\r\nLicensed under the GPL version 3. \r\n\r\nThis is in no way affiliated with or endorsed by Sierra Entertainment or any other company.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}